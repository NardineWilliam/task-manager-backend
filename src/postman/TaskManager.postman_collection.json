{
	"info": {
		"_postman_id": "747c7dc5-0b70-445b-9fc5-06e2cf6c1b33",
		"name": "Task Manager API - Nardine William",
		"description": "Backend API collection for Task Manager project built with Express, MySQL, and JWT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33391981"
	},
	"item": [
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"test@example.com\",\r\n  \"fullName\": \"Test User\",\r\n  \"password\": \"Test@1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"token\", response.token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"test@example.com\",\r\n  \"password\": \"Test@1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"First Task\",\r\n  \"description\": \"My first task description\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/tasks/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Updated Task\",\r\n  \"description\": \"Updated description\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/tasks/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Toggle Completion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks/1/toggle",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks",
						"1",
						"toggle"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200 || pm.response.code === 201) {\r",
							"  pm.test(\"Success response\", () => {\r",
							"    pm.response.to.have.status(pm.response.code);\r",
							"  });\r",
							"} else if ([400, 401, 404].includes(pm.response.code)) {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.test(\"Expected error response\", () => {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"  });\r",
							"} else {\r",
							"  pm.test(\"Unexpected status code\", () => {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImlhdCI6MTc1NDU4MTY1NCwiZXhwIjoxNzU0NjY4MDU0fQ.F9H44gkl-ILQFGcMhXtTTPF1dUKOUCAIel_T4XAVU8w",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}